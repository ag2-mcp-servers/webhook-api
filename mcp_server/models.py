# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:48:03+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, ConfigDict, Field, RootModel


class ApplicationId(RootModel[str]):
    root: str = Field(
        ...,
        description='ID of your Apideck Application',
        examples=['dSBdXd2H6Mqwfg0atXHXYcysLJE9qyn1VwBtXHX'],
    )


class BadRequestResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestvalidationerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestValidationError'],
    )


class ConsumerId(RootModel[str]):
    root: str = Field(
        ...,
        description="Unique consumer identifier. You can freely choose a consumer ID yourself. Most of the time, this is an ID of your internal data model that represents a user or account in your system (for example account:12345). If the consumer doesn't exist yet, Vault will upsert a consumer based on your ID.",
        examples=['test_consumer_id'],
    )


class CreatedAt(RootModel[datetime]):
    root: datetime = Field(
        ...,
        description='The date and time when the object was created.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Created at (timestamp)',
    )


class DeliveryUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ...,
        description='The delivery url of the webhook endpoint.',
        examples=['https://example.com/my/webhook/endpoint'],
    )


class Description(RootModel[Optional[str]]):
    root: Optional[str] = Field(
        None,
        description='A description of the object.',
        examples=['A description'],
        title='Description',
    )


class ExecuteBaseUrl(RootModel[AnyUrl]):
    root: AnyUrl = Field(
        ...,
        description='The Unify Base URL events from connectors will be sent to after service id is appended.',
        examples=['https://unify.apideck.com/webhook/webhooks/1234/execute'],
    )


class ExecuteWebhookEventRequest(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class ExecuteWebhookEventsRequest(RootModel[List[Dict[str, Any]]]):
    root: List[Dict[str, Any]]


class ExecuteWebhookResponse(BaseModel):
    request_id: Optional[str] = Field(
        None,
        description='UUID of the request received',
        examples=['c6af9ac6-7b61-11e6-9a41-93e8deadbeef'],
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )
    timestamp: Optional[str] = Field(
        None,
        description='ISO Datetime webhook event was received',
        examples=['2021-10-01T08:26:28.039Z'],
    )


class Links(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Link to navigate to the current page through the API',
        examples=['https://unify.apideck.com/crm/companies'],
    )
    next: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjM'
        ],
    )
    previous: Optional[str] = Field(
        None,
        description='Link to navigate to the previous page through the API',
        examples=[
            'https://unify.apideck.com/crm/companies?cursor=em9oby1jcm06OnBhZ2U6OjE%3D'
        ],
    )


class Cursors(BaseModel):
    current: Optional[str] = Field(
        None,
        description='Cursor to navigate to the current page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjI='],
    )
    next: Optional[str] = Field(
        None,
        description='Cursor to navigate to the next page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjM='],
    )
    previous: Optional[str] = Field(
        None,
        description='Cursor to navigate to the previous page of results through the API',
        examples=['em9oby1jcm06OnBhZ2U6OjE='],
    )


class Meta(BaseModel):
    cursors: Optional[Cursors] = Field(
        None,
        description='Cursors to navigate to previous or next pages through the API',
    )
    items_on_page: Optional[int] = Field(
        None,
        description='Number of items returned in the data property of the response',
        examples=[50],
    )


class NotFoundResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Found'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unknown Widget'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#entitynotfounderror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[404]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['EntityNotFoundError']
    )


class NotImplementedResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Not Implemented'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unmapped Attribute'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#mappingerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[501]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['MappingError']
    )


class PaymentRequiredResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=['You have reached your limit of 2000'],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Payment Required'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Request Limit Reached'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#requestlimiterror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[402]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['RequestLimitError']
    )


class ResolveWebhookEventRequest(BaseModel):
    pass
    model_config = ConfigDict(
        extra='allow',
    )


class ResolveWebhookEventsRequest(RootModel[List[Dict[str, Any]]]):
    root: List[Dict[str, Any]]


class ResolveWebhookResponse(BaseModel):
    request_id: Optional[str] = Field(
        None,
        description='UUID of the request received',
        examples=['c6af9ac6-7b61-11e6-9a41-93e8deadbeef'],
    )
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )
    timestamp: Optional[str] = Field(
        None,
        description='ISO Datetime webhook event was received',
        examples=['2021-10-01T08:26:28.039Z'],
    )


class ServiceId(RootModel[str]):
    root: str = Field(
        ..., description='Service provider identifier', examples=['close']
    )


class Status(Enum):
    enabled = 'enabled'
    disabled = 'disabled'


class UnauthorizedResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Failed to generate valid JWT Session. Verify applicationId is correct'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unauthorized'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Unauthorized Request'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[401]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['UnauthorizedError']
    )


class UnexpectedErrorResponse(BaseModel):
    detail: Optional[Union[str, Dict[str, Any]]] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Bad Request'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid Params'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#unauthorizederror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[400]
    )
    type_name: Optional[str] = Field(
        None,
        description='The type of error returned',
        examples=['RequestHeadersValidationError'],
    )


class UnifiedApiId(Enum):
    accounting = 'accounting'
    ats = 'ats'
    calendar = 'calendar'
    crm = 'crm'
    csp = 'csp'
    customer_support = 'customer-support'
    ecommerce = 'ecommerce'
    email = 'email'
    email_marketing = 'email-marketing'
    expense_management = 'expense-management'
    file_storage = 'file-storage'
    form = 'form'
    hris = 'hris'
    lead = 'lead'
    payroll = 'payroll'
    pos = 'pos'
    procurement = 'procurement'
    project_management = 'project-management'
    script = 'script'
    sms = 'sms'
    spreadsheet = 'spreadsheet'
    team_messaging = 'team-messaging'
    issue_tracking = 'issue-tracking'
    time_registration = 'time-registration'
    transactional_email = 'transactional-email'
    vault = 'vault'


class UnprocessableResponse(BaseModel):
    detail: Optional[str] = Field(
        None,
        description='Contains parameter or domain specific information related to the error and why it occurred.',
        examples=[
            'Unprocessable request, please verify your request headers and body.'
        ],
    )
    error: Optional[str] = Field(
        None,
        description='Contains an explanation of the status_code as defined in HTTP/1.1 standard (RFC 7231)',
        examples=['Unprocessable Entity'],
    )
    message: Optional[str] = Field(
        None,
        description='A human-readable message providing more details about the error.',
        examples=['Invalid State'],
    )
    ref: Optional[str] = Field(
        None,
        description='Link to documentation of error type',
        examples=['https://developers.apideck.com/errors#invalidstateerror'],
    )
    status_code: Optional[float] = Field(
        None, description='HTTP status code', examples=[422]
    )
    type_name: Optional[str] = Field(
        None, description='The type of error returned', examples=['InvalidStateError']
    )


class UpdatedAt(RootModel[Optional[datetime]]):
    root: Optional[datetime] = Field(
        None,
        description='The date and time when the object was last updated.',
        examples=['2020-09-30T07:43:32.000Z'],
        title='Updated at (timestamp)',
    )


class DisabledReason(Enum):
    none = 'none'
    retry_limit = 'retry_limit'
    usage_limit = 'usage_limit'


class Attempt(BaseModel):
    execution_attempt: Optional[float] = Field(
        None,
        description='Number of attempts webhook endpoint was called before a success was returned or eventually failed',
        examples=[3],
    )
    status_code: Optional[int] = Field(
        None, description='HTTP Status code that was returned.', examples=[200]
    )
    success: Optional[bool] = Field(
        None, description='Whether or not the request was successful.', examples=[True]
    )
    timestamp: Optional[str] = Field(
        None,
        description='ISO Date and time when the request was made.',
        examples=['2021-07-12T14:26:17.420Z'],
    )


class Service(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    id: str = Field(
        ..., description='Apideck service provider id.', examples=['101-data-solution']
    )
    name: str = Field(
        ...,
        description='Apideck service provider name.',
        examples=['101 Data Solution'],
    )


class WebhookEventLog(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    application_id: Optional[ApplicationId] = None
    attempts: Optional[List[Attempt]] = Field(
        None, description='record of each attempt to call webhook endpoint'
    )
    consumer_id: Optional[ConsumerId] = None
    endpoint: Optional[AnyUrl] = Field(
        None,
        description='The URL of the webhook endpoint.',
        examples=['https://example.com/my/webhook/endpoint'],
    )
    entity_type: Optional[str] = Field(
        None,
        description='Name of the Entity described by the attributes delivered within payload',
        examples=['Connection'],
    )
    event_type: Optional[str] = Field(
        None,
        description='Name of source event that webhook is subscribed to.',
        examples=['vault.connection.updated'],
    )
    execution_attempt: Optional[float] = Field(
        None,
        description='Number of attempts webhook endpoint was called before a success was returned or eventually failed',
        examples=[3],
    )
    http_method: Optional[str] = Field(
        None, description='HTTP Method of request to endpoint.', examples=['GET']
    )
    id: Optional[str] = Field(None, examples=['1d174c4d-fe9e-4377-a76c-6da22fe9cd87'])
    request_body: Optional[str] = Field(
        None,
        description='The JSON stringified payload that was delivered to the webhook endpoint.',
        examples=[
            '{"entity":{"id":"2222+test_user_id","application_id":"2222","consumer_id":"test_user_id","name":"ActiveCampaign","icon":"https://res.cloudinary.com/apideck/image/upload/v1529455970/catalog/activecampaign/icon128x128.png","logo":"https://www.activecampaign.com/site/assets/social-2x.png","unified_api":"crm","service_id":"activecampaign","auth_type":"apiKey","enabled":true,"tag_line":"Integrated email marketing, marketing automation, and small business CRM. Save time while growing your business with sales automation.","website":"https://www.activecampaign.com/","settings":{"instance_url":"https://eu28.salesforce.com","base_url":"https://updated.api-us1.com"},"metadata":{"plan":"enterprise","account":{"name":"My Company"}},"state":"callable","created_at":"2021-09-10T10:39:49.628Z","updated_at":"2021-09-10T10:39:52.715Z"},"entityType":"Connection"}'
        ],
    )
    response_body: Optional[str] = Field(
        None,
        description='The JSON stringified response that was returned from the webhook endpoint.',
        examples=['{"status":"OK"}'],
    )
    retry_scheduled: Optional[bool] = Field(
        None,
        description='If the request has not hit the max retry limit and will be retried.',
        examples=[True],
    )
    service: Optional[Service] = Field(
        None, description='Apideck service provider associated with event.'
    )
    status_code: Optional[int] = Field(
        None, description='HTTP Status code that was returned.', examples=[200]
    )
    success: Optional[bool] = Field(
        None, description='Whether or not the request was successful.', examples=[True]
    )
    timestamp: Optional[str] = Field(
        None,
        description='ISO Date and time when the request was made.',
        examples=['2021-07-12T14:26:17.420Z'],
    )
    unified_api: Optional[UnifiedApiId] = None


class Service1(BaseModel):
    id: Optional[str] = None


class WebhookEventLogsFilter(BaseModel):
    consumer_id: Optional[str] = Field(None, examples=['test_user_id'])
    entity_type: Optional[str] = Field(None, examples=['Connection'])
    event_type: Optional[str] = Field(None, examples=['vault.connection.callable'])
    exclude_apis: Optional[str] = Field(None, examples=['vault,proxy'])
    service: Optional[Service1] = None


class WebhookEventType(Enum):
    field_ = '*'
    crm_activity_created = 'crm.activity.created'
    crm_activity_updated = 'crm.activity.updated'
    crm_activity_deleted = 'crm.activity.deleted'
    crm_company_created = 'crm.company.created'
    crm_company_updated = 'crm.company.updated'
    crm_company_deleted = 'crm.company.deleted'
    crm_contact_created = 'crm.contact.created'
    crm_contact_updated = 'crm.contact.updated'
    crm_contact_deleted = 'crm.contact.deleted'
    crm_lead_created = 'crm.lead.created'
    crm_lead_updated = 'crm.lead.updated'
    crm_lead_deleted = 'crm.lead.deleted'
    crm_note_created = 'crm.note.created'
    crm_notes_updated = 'crm.notes.updated'
    crm_notes_deleted = 'crm.notes.deleted'
    crm_opportunity_created = 'crm.opportunity.created'
    crm_opportunity_updated = 'crm.opportunity.updated'
    crm_opportunity_deleted = 'crm.opportunity.deleted'
    lead_lead_created = 'lead.lead.created'
    lead_lead_updated = 'lead.lead.updated'
    lead_lead_deleted = 'lead.lead.deleted'
    vault_connection_created = 'vault.connection.created'
    vault_connection_updated = 'vault.connection.updated'
    vault_connection_disabled = 'vault.connection.disabled'
    vault_connection_deleted = 'vault.connection.deleted'
    vault_connection_callable = 'vault.connection.callable'
    vault_connection_token_refresh_failed = 'vault.connection.token_refresh.failed'
    ats_job_created = 'ats.job.created'
    ats_job_updated = 'ats.job.updated'
    ats_job_deleted = 'ats.job.deleted'
    ats_applicant_created = 'ats.applicant.created'
    ats_applicant_updated = 'ats.applicant.updated'
    ats_applicant_deleted = 'ats.applicant.deleted'
    accounting_customer_created = 'accounting.customer.created'
    accounting_customer_updated = 'accounting.customer.updated'
    accounting_customer_deleted = 'accounting.customer.deleted'
    accounting_invoice_created = 'accounting.invoice.created'
    accounting_invoice_updated = 'accounting.invoice.updated'
    accounting_invoice_deleted = 'accounting.invoice.deleted'
    accounting_invoice_item_created = 'accounting.invoice_item.created'
    accounting_invoice_item_updated = 'accounting.invoice_item.updated'
    accounting_invoice_item_deleted = 'accounting.invoice_item.deleted'
    accounting_ledger_account_created = 'accounting.ledger_account.created'
    accounting_ledger_account_updated = 'accounting.ledger_account.updated'
    accounting_ledger_account_deleted = 'accounting.ledger_account.deleted'
    accounting_tax_rate_created = 'accounting.tax_rate.created'
    accounting_tax_rate_updated = 'accounting.tax_rate.updated'
    accounting_tax_rate_deleted = 'accounting.tax_rate.deleted'
    accounting_bill_created = 'accounting.bill.created'
    accounting_bill_updated = 'accounting.bill.updated'
    accounting_bill_deleted = 'accounting.bill.deleted'
    accounting_payment_created = 'accounting.payment.created'
    accounting_payment_updated = 'accounting.payment.updated'
    accounting_payment_deleted = 'accounting.payment.deleted'
    accounting_supplier_created = 'accounting.supplier.created'
    accounting_supplier_updated = 'accounting.supplier.updated'
    accounting_supplier_deleted = 'accounting.supplier.deleted'
    pos_order_created = 'pos.order.created'
    pos_order_updated = 'pos.order.updated'
    pos_order_deleted = 'pos.order.deleted'
    pos_product_created = 'pos.product.created'
    pos_product_updated = 'pos.product.updated'
    pos_product_deleted = 'pos.product.deleted'
    pos_payment_created = 'pos.payment.created'
    pos_payment_updated = 'pos.payment.updated'
    pos_payment_deleted = 'pos.payment.deleted'
    pos_merchant_created = 'pos.merchant.created'
    pos_merchant_updated = 'pos.merchant.updated'
    pos_merchant_deleted = 'pos.merchant.deleted'
    pos_location_created = 'pos.location.created'
    pos_location_updated = 'pos.location.updated'
    pos_location_deleted = 'pos.location.deleted'
    pos_item_created = 'pos.item.created'
    pos_item_updated = 'pos.item.updated'
    pos_item_deleted = 'pos.item.deleted'
    pos_modifier_created = 'pos.modifier.created'
    pos_modifier_updated = 'pos.modifier.updated'
    pos_modifier_deleted = 'pos.modifier.deleted'
    pos_modifier_group_created = 'pos.modifier-group.created'
    pos_modifier_group_updated = 'pos.modifier-group.updated'
    pos_modifier_group_deleted = 'pos.modifier-group.deleted'
    hris_employee_created = 'hris.employee.created'
    hris_employee_updated = 'hris.employee.updated'
    hris_employee_deleted = 'hris.employee.deleted'
    hris_company_created = 'hris.company.created'
    hris_company_updated = 'hris.company.updated'
    hris_company_deleted = 'hris.company.deleted'
    file_storage_file_created = 'file-storage.file.created'
    file_storage_file_updated = 'file-storage.file.updated'
    file_storage_file_deleted = 'file-storage.file.deleted'
    issue_tracking_ticket_created = 'issue-tracking.ticket.created'
    issue_tracking_ticket_updated = 'issue-tracking.ticket.updated'
    issue_tracking_ticket_deleted = 'issue-tracking.ticket.deleted'


class WebhookWIdServiceIdPostRequest(
    RootModel[Union[ResolveWebhookEventRequest, ResolveWebhookEventsRequest]]
):
    root: Union[ResolveWebhookEventRequest, ResolveWebhookEventsRequest]


class WebhookWebhooksIdExecuteServiceIdPostRequest(
    RootModel[Union[ExecuteWebhookEventRequest, ExecuteWebhookEventsRequest]]
):
    root: Union[ExecuteWebhookEventRequest, ExecuteWebhookEventsRequest]


class WebhookWebhooksIdXServiceIdPostRequest(
    RootModel[Union[ExecuteWebhookEventRequest, ExecuteWebhookEventsRequest]]
):
    root: Union[ExecuteWebhookEventRequest, ExecuteWebhookEventsRequest]


class CreateWebhookRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    delivery_url: DeliveryUrl
    description: Optional[Description] = None
    events: List[WebhookEventType] = Field(
        ...,
        description='The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.',
        examples=[['vault.connection.created', 'vault.connection.updated']],
        title='Subscribed events',
    )
    status: Status
    unified_api: UnifiedApiId


class GetWebhookEventLogsResponse(BaseModel):
    data: List[WebhookEventLog]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateWebhookRequest(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    delivery_url: Optional[DeliveryUrl] = None
    description: Optional[Description] = None
    events: Optional[List[WebhookEventType]] = Field(
        None,
        description='The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.',
        examples=[['vault.connection.created', 'vault.connection.updated']],
        title='Subscribed events',
    )
    status: Optional[Status] = None


class Webhook(BaseModel):
    model_config = ConfigDict(
        extra='forbid',
    )
    created_at: Optional[CreatedAt] = None
    delivery_url: DeliveryUrl
    description: Optional[Description] = None
    disabled_reason: Optional[DisabledReason] = Field(
        None,
        description="Indicates if the webhook has has been disabled as it reached its retry limit or if account is over the usage allocated by it's plan.",
        examples=['retry_limit'],
    )
    events: List[WebhookEventType] = Field(
        ...,
        description='The list of subscribed events for this webhook. [`*`] indicates that all events are enabled.',
        examples=[['vault.connection.created', 'vault.connection.updated']],
        title='Subscribed events',
    )
    execute_base_url: ExecuteBaseUrl
    id: Optional[str] = Field(None, examples=['1234'])
    status: Status
    unified_api: UnifiedApiId
    updated_at: Optional[UpdatedAt] = None


class WebhookEvent(BaseModel):
    entity_id: Optional[str] = Field(
        None,
        description="The service provider's ID of the entity that triggered this event",
        examples=['123456ASDF'],
    )
    entity_type: Optional[str] = Field(
        None,
        description='The type entity that triggered this event',
        examples=['Company'],
    )
    entity_url: Optional[str] = Field(
        None,
        description='The url to retrieve entity detail.',
        examples=['https://unify.apideck.com/crm/contacts/123456'],
    )
    event_id: Optional[str] = Field(
        None,
        description='Unique reference to this request event',
        examples=['9755c355-56c3-4a2f-a2da-86ff4411fccb'],
    )
    event_type: Optional[WebhookEventType] = None
    execution_attempt: Optional[float] = Field(
        None,
        description='The current count this request event has been attempted',
        examples=[2],
    )
    occurred_at: Optional[datetime] = Field(
        None,
        description='ISO Datetime for when the original event occurred',
        examples=['2021-10-01T03:14:55.419Z'],
    )
    service_id: Optional[ServiceId] = None


class CreateWebhookResponse(BaseModel):
    data: Webhook
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class DeleteWebhookResponse(BaseModel):
    data: Webhook
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetWebhookResponse(BaseModel):
    data: Webhook
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class GetWebhooksResponse(BaseModel):
    data: List[Webhook]
    links: Optional[Links] = None
    meta: Optional[Meta] = None
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )


class UpdateWebhookResponse(BaseModel):
    data: Webhook
    status: str = Field(..., description='HTTP Response Status', examples=['OK'])
    status_code: int = Field(
        ..., description='HTTP Response Status Code', examples=[200]
    )
